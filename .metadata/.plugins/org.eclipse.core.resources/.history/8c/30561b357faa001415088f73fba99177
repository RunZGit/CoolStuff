//import static org.junit.Assert.*;
//
//import java.util.ArrayList;
//
//import org.junit.AfterClass;
//import org.junit.Test;
//
//public class Testing {
//	private static int points = 0;
//	
//	@Test
//	public void testingBasicListInsert(){
//		SkipList<Integer> s = new SkipList<Integer>();
//		int size = 8;
//		for (int i = 1; i < size; i++) s.insert(i, 1);
////		System.out.println(s);
//		SkipList<Integer>.Node temp = s.root.getLinks().get(0);
//		for (int i = 1; i < size; i++){
//			assertFalse(temp == null);
//			assertEquals(new Integer(i), temp.getElement());
//			assertEquals(1, temp.getLinks().size());
//			temp = temp.getLinks().get(0);
//		}
//		assertTrue(temp == null);
//		points += 5;
//	}
//	
//	@Test
//	public void testingInscreasingInsert(){
//		SkipList<Integer> s = new SkipList<Integer>();
//		int size = 8;
//		for (int i = 1; i < size; i++) s.insert(i, i);
////		System.out.println(s);
//		for (int i = 0; i < size-1; i++) {
//			assertEquals(new Integer(i+1), s.root.getLinks().get(i).getElement());
//		}
//		assertEquals(null, s.root.getLinks().get(7));
//		SkipList<Integer>.Node temp = s.root.getLinks().get(0);
//		for (int i = 1; i < size; i++){
//			assertFalse(temp == null);
//			assertEquals(new Integer(i), temp.getElement());
//			assertEquals(i, temp.getLinks().size());
//			temp = temp.getLinks().get(0);
//		}
//		assertTrue(temp == null);
//		points += 5;
//	}
//	
//	@Test
//	public void testingDecreasingInsert(){
//		SkipList<Integer> s = new SkipList<Integer>();
//		int size = 8;
//		for (int i = 1; i < size; i++) s.insert(i, size-i);
////		System.out.println(s);
//		for (int i = 0; i < size-1; i++) {
//			assertEquals(new Integer(1), s.root.getLinks().get(i).getElement());
//		}
//		assertEquals(null, s.root.getLinks().get(7));
//		SkipList<Integer>.Node temp = s.root.getLinks().get(0);
//		for (int i = 1; i < size; i++){
//			assertFalse(temp == null);
//			assertEquals(new Integer(i), temp.getElement());
//			assertEquals(size - i, temp.getLinks().size());
//			temp = temp.getLinks().get(0);
//		}
//		assertTrue(temp == null);
//		points += 5;
//
//	}
//	
//	
//	@Test
//	public void testingBasicRemove(){
//		SkipList<Integer> s = new SkipList<Integer>();
//		int size = 8;
//		for (int i = 1; i < size; i++) s.insert(i, 1);
//		s.remove(4);
////		System.out.println(s);
//		SkipList<Integer>.Node temp = s.root.getLinks().get(0);
//		for (int i = 1; i < 4; i++){
//			assertFalse(temp == null);
//			assertEquals(new Integer(i), temp.getElement());
//			assertEquals(1, temp.getLinks().size());
//			temp = temp.getLinks().get(0);
//		}
//		for (int i = 5; i < size; i++){
//			assertFalse(temp == null);
//			assertEquals(new Integer(i), temp.getElement());
//			assertEquals(1, temp.getLinks().size());
//			temp = temp.getLinks().get(0);
//		}
//		assertTrue(temp == null);
//		for (int i = 1; i < size; i++) {
//			s.remove(i);
//		}
////		System.out.println(s);
//		assertTrue(s.root.getLinks().get(0) == null);
//		points += 5;
//	}
//	
//	@Test
//	public void testingInscreasingRemove(){
//		SkipList<Integer> s = new SkipList<Integer>();
//		int size = 8;
//		for (int i = 1; i < size; i++) s.insert(i, i);
//		s.remove(6);
////		System.out.println(s);
//		SkipList<Integer>.Node temp = s.root.getLinks().get(0);
//		for (int i = 1; i < 6; i++){
//			assertFalse(temp == null);
//			assertEquals(new Integer(i), temp.getElement());
//			assertEquals(i, temp.getLinks().size());
//			temp = temp.getLinks().get(0);
//		}
//		for (int i = 7; i < size; i++){
//			assertFalse(temp == null);
//			assertEquals(new Integer(i), temp.getElement());
//			assertEquals(i, temp.getLinks().size());
//			temp = temp.getLinks().get(0);
//		}
//		assertTrue(temp == null);
//		for (int i = 1; i < size; i++) {
//			s.remove(i);
//		}
////		System.out.println(s);
//		assertTrue(s.root.getLinks().get(0) == null);
//		points += 5;
//	}
//	
//	@Test
//	public void testingDecreasingRemove(){
//		SkipList<Integer> s = new SkipList<Integer>();
//		int size = 8;
//		for (int i = 1; i < size; i++) s.insert(i, size-i);
//		s.remove(3);
////		System.out.println(s);
//		SkipList<Integer>.Node temp = s.root.getLinks().get(0);
//		for (int i = 1; i < 3; i++){
//			assertFalse(temp == null);
//			assertEquals(new Integer(i), temp.getElement());
//			assertEquals(size-i, temp.getLinks().size());
//			temp = temp.getLinks().get(0);
//		}
//		for (int i = 4; i < size; i++){
//			assertFalse(temp == null);
//			assertEquals(new Integer(i), temp.getElement());
//			assertEquals(size-i, temp.getLinks().size());
//			temp = temp.getLinks().get(0);
//		}
//		assertTrue(temp == null);
//		for (int i = 1; i < size; i++) {
//			s.remove(i);
//		}
////		System.out.println(s);
//		assertTrue(s.root.getLinks().get(0) == null);
//		points += 5;
//
//	}
//
//	@Test
//	public void testingLogBehavior(){
//		SkipList<Integer> t = new SkipList<Integer>();
//		int nums = 2000000;
//		int[] a = new int[nums];
//		// populating array
//		for (int i = 0; i < nums; i++){
//			a[i] = i;
//		}
//		int i1;
//		int i2;	
//		int temp2;
//		// shuffling array
//		for (int i = 0; i < nums; i++) {
//		    i1 = (int) (Math.random() * nums);
//		    i2 = (int) (Math.random() * nums);
//		    temp2 = a[i1];
//		    a[i1] = a[i2];
//		    a[i2] = temp2;
//		}	
//		for (int i = 1; i < nums; i++) t.insert(a[i]);
//		SkipList<Integer>.Node temp = t.root.getLinks().get(0);
//		for (int i = 1; i < nums; i++){
//			assertFalse(temp == null);
//			temp = temp.getLinks().get(0);
//		}
//		assertTrue(temp == null);
//		
//		for (int i = 1; i < nums; i++) t.remove(a[i]);
//		assertTrue(t.root.getLinks().get(0) == null);
//		points += 20;
//	}
//	
//
//	@AfterClass
//	public static void testNothing(){
//		System.out.println("Points: " + points);
//	}
//	
//}
package skiplists.skiplist;

public class SkipList<T extends Comparable<T>> {
private SkipNode<T> start;
private SkipNode<T> end;
private SkipNode<T> supportStart;
private SkipNode<T> supportEnd;
private int size;
private int sizeSupport;

public T getStart() {
    return start.getData();
}

public T getEnd() {
    return end.getData();
}

public int getSize() {
    return size;
}

public void add(T data){
    if(start == null){
        insertAsFirstElement(data);
    }
    else{
        insert(data);
    }
}

private void insertAsFirstElement(T data){
    SkipNode<T> node = new SkipNode<>(data);
    start = node;
    end = node;
    size++;

    SkipNode<T> supportNode = new SkipNode<>(data); 
    supportStart = supportNode;
    supportEnd = supportNode;
    supportNode.setDown(node);
    sizeSupport++;
}

//Adding element in the end assuming user enters data in ascending order
private void insert(T data){
    SkipNode<T> node = new SkipNode<>(data);
    end.setNext(node);
    node.setPrevious(end);
    end = node;
    size++;

    int expectedSupportSize = (int) Math.sqrt(size);
    if(sizeSupport < expectedSupportSize){
        SkipNode<T> supportNode = new SkipNode<>(data);
        supportEnd.setNext(supportNode);
        supportNode.setPrevious(supportEnd);
        supportEnd = supportNode;
        supportNode.setDown(node);
        sizeSupport++;

        if(sizeSupport > 2)
        reAjustSupportList();

    }
}

/*readjusting the support list so that they point to the correct nodes when new 
*support nodes are added
*/
private void reAjustSupportList(){
    SkipNode<T> navigationNode = supportStart.getNext();
    int i = 1; 

    while(navigationNode != supportEnd){
        SkipNode<T> tempNode = navigationNode.getDown();
        for(int j = 1 ; j <= i ; j++){
            tempNode = tempNode.getNext();
        }
        navigationNode.setDown(tempNode);
        navigationNode.setData(tempNode.getData());
        navigationNode = navigationNode.getNext();

        i++;
    }
}

public boolean search(T data){
    SkipNode<T> navigationNode = supportStart;

    if(data.compareTo(navigationNode.getData()) < 1){
        return false;
    }

    while(navigationNode != null && navigationNode.getNext() != null && (data.compareTo(navigationNode.getNext().getData()) > 0 || data.compareTo(navigationNode.getData()) == 0)){
                    navigationNode = navigationNode.getNext();
    }

    SkipNode<T> searchNodeStart = navigationNode.getDown();
    SkipNode<T> searchNodeEnd  = navigationNode.getNext().getDown();

    while(searchNodeStart != searchNodeEnd){
        if(searchNodeStart.getData().compareTo(data) == 0){
            return true;
        }
        searchNodeStart = searchNodeStart.getNext();
    }
    return false;
}

private static class SkipNode<T>{

    public SkipNode(T data){
        this.data = data;
    }

    private SkipNode<T> next = null;
    private SkipNode<T> previous = null;
    private SkipNode<T> down = null;
    private T  data;

    public SkipNode<T> getNext() {
        return next;
    }
    public void setNext(SkipNode<T> next) {
        this.next = next;
    }
    public SkipNode<T> getPrevious() {
        return previous;
    }
    public void setPrevious(SkipNode<T> previous) {
        this.previous = previous;
    }
    public SkipNode<T> getDown() {
        return down;
    }
    public void setDown(SkipNode<T> down) {
        this.down = down;
    }
    public T getData() {
        return data;
    }
    public void setData(T data) {
        this.data = data;
    }
}
}